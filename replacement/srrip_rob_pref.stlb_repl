#include "cache.h"
#include <time.h>
#define maxRRPV 3
#include <set>
uint32_t rrpv[STLB_SET][STLB_WAY];

std::set<uint32_t> ptes;
// initialize replacement state
void CACHE::stlb_initialize_replacement()
{
    cout << "STLB has SRRIP replacement policy" << endl;
    srand((unsigned int) time(NULL));
    for (int i = 0; i < STLB_SET; i++)
    {
        for (int j = 0; j < STLB_WAY; j++)
        {
            rrpv[i][j] = maxRRPV;
        }
    }
}

// find replacement victim
uint32_t CACHE::stlb_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    int min_loc = INT16_MAX;
    int min_loc_index;
    int num_max = 0;

    while (1)
    {
        FILE *fp = fopen("collisions.txt", "a");
        for (int i = 0; i < STLB_WAY; i++)
        {
            if (rrpv[set][i] == maxRRPV)
            {

                if (miss_latency_map[current_set[i].full_addr >> LOG2_PAGE_SIZE].size())
                {
                    fprintf(fp, "%llu : %llu   ", (unsigned long long)current_set[i].full_addr, (unsigned long long)miss_latency_map[current_set[i].full_addr >> LOG2_PAGE_SIZE].back());
                    num_max++;
                }
            }
        }
        fprintf(fp, "\n");
        fclose(fp);

        if (num_max > 1)
            num_ties++;
        for (int i = 0; i < STLB_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
            {
                if(current_set[i].is_priority_set){
                    if(!current_set[i].high_priority){
                        return i;
                    }
                }
                else{
                    current_set[i].is_priority_set = true;
                    if(!current_set[i].caused_rob_stall){
                        current_set[i].high_priority = false;
                    }
                    else{
                        if(((double) rand() / RAND_MAX) < 1/32){
                            current_set[i].high_priority = true;
                            return i;
                        }
                        else{
                            current_set[i].high_priority = false;
                        }
                    }
                }
            }
        
        for(int i=0;i<STLB_WAY;i++){
            if(rrpv[set][i] == maxRRPV){
                return i;
            }
        }


        for (int i = 0; i < STLB_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::stlb_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    ptes.insert(full_addr >> LOG2_PAGE_SIZE);
    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the STLB accesses
    // cout << "CPU: " << cpu << "  STLB " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    if (hit && type == WRITEBACK)
        return;

    if (hit)
        rrpv[set][way] = 0;
    else
        rrpv[set][way] = maxRRPV - 1;
}

void CACHE::stlb_replacement_final_stats()
{
    cout << "Number of unique pages in STLB: " << ptes.size() << endl;
    cout << "STLB Miss Latencies Data:" << endl;
    cout << "Size of Miss Latencies Map: " << miss_latency_map.size() << endl;
    // for (auto it : miss_latency_map)
    // {
    //     cout << it.first << " ";
    //     for (auto jt : it.second)
    //     {
    //         cout << jt << " ";
    //     }
    //     cout << endl;
    // }
    cout << "Number of ties in STLB: " << num_ties << endl;
    cout << "ROB Stalls Caused by STLB: " << rob_stalls_caused << endl;
    cout << "ROB Stall cycles caused by STLB: " << rob_stall_cycles_caused << endl;
}